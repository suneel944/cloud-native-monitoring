name: Deploy to AWS EKS
on:
  push:
    branches:
      - master
env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY_NAME: cloud-monitoring-app
  EKS_CLUSTER_NAME: cloud-monitoring-app-cluster
  EKS_NODEGROUP_NAME: cloud-monitoring-nodegroup
  KUBE_DEPLOYMENT_CONFIG: '${{ github.workspace }}/eks/deployment.yml'
  KUBE_SERVICE_CONFIG: "${{ github.workspace }}/eks/service.yml"
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        id: install
      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          verbose: false
          arch: amd64
      - name: Disable AWS CLI pager
        run:
          export AWS_PAGER=""
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ env.AWS_REGION }}'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: 'Build, tag, and push docker image to Amazon ECR'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:$IMAGE_TAG -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}:latest .
          docker push -a $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NAME }}
      - name: Update kubeconfig
        env:
          EKS_CLUSTER_ARN: $(aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --query 'cluster.arn' --output text --no-cli-pager)
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --no-cli-pager
      - name: Deploy to EKS
        run: |
          kubectl apply -f ${{ env.KUBE_DEPLOYMENT_CONFIG }}
          kubectl apply -f ${{ env.KUBE_SERVICE_CONFIG }}